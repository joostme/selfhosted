services:
  radarr:
    container_name: radarr
    image: linuxserver/radarr:5.27.5
    volumes:
      - ${APPDATA_PATH}/radarr:/config
      - ${DATA_PATH}/:/data
    networks:
      - proxy
      - data_net
    env_file: .env
    labels:
      traefik.enable: true
      traefik.http.routers.radarr.tls: true
      traefik.http.routers.radarr.tls.certresolver: letsencrypt
      traefik.http.routers.radarr.rule: Host(`${SERVICE_URL_RADARR}`)
      traefik.http.routers.radarr.entrypoints: websecure
      traefik.http.routers.radarr.middlewares: tinyauth
      traefik.http.routers.radarr.priority: 99

      traefik.http.routers.radarr-bypass.tls: true
      traefik.http.routers.radarr-bypass.tls.certresolver: letsencrypt
      traefik.http.routers.radarr-bypass.rule: Host(`${SERVICE_URL_RADARR}`) && Header(`traefik-auth-bypass-key`, `${TRAEFIK_AUTH_BYPASS_KEY}`)
      traefik.http.routers.radarr-bypass.entrypoints: websecure
      traefik.http.routers.radarr-bypass.priority: 100

      tinyauth.apps.radarr.config.domain: ${SERVICE_URL_RADARR}
      tinyauth.apps.radarr.oauth.groups: admin

      glance.name: Radarr
      glance.icon: sh:radarr
      glance.category: media
      glance.url: https://${SERVICE_URL_RADARR}
      net.unraid.docker.webui: https://${SERVICE_URL_RADARR}
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/radarr.png
    restart: always

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:4.0.15
    volumes:
      - ${APPDATA_PATH}/sonarr:/config
      - ${DATA_PATH}/:/data
    networks:
      - proxy
      - data_net
    env_file: .env
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: letsencrypt
      traefik.http.routers.sonarr.rule: Host(`${SERVICE_URL_SONARR}`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.middlewares: tinyauth
      traefik.http.routers.sonarr.priority: 99

      traefik.http.routers.sonarr-bypass.tls: true
      traefik.http.routers.sonarr-bypass.tls.certresolver: letsencrypt
      traefik.http.routers.sonarr-bypass.rule: Host(`${SERVICE_URL_SONARR}`) && Header(`traefik-auth-bypass-key`, `${TRAEFIK_AUTH_BYPASS_KEY}`)
      traefik.http.routers.sonarr-bypass.entrypoints: websecure
      traefik.http.routers.sonarr-bypass.priority: 100

      tinyauth.apps.sonarr.config.domain: ${SERVICE_URL_SONARR}
      tinyauth.apps.sonarr.oauth.groups: admin

      glance.name: Sonarr
      glance.icon: sh:sonarr
      glance.category: media
      glance.url: https://${SERVICE_URL_SONARR}
      net.unraid.docker.webui: https://${SERVICE_URL_SONARR}
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/sonarr.png
    restart: always

  lidarr:
    container_name: lidarr
    image: blampe/lidarr:2.13.1-develop
    volumes:
      - ${APPDATA_PATH}/lidarr:/config
      - ${DATA_PATH}/:/data
    networks:
      - proxy
      - data_net
    env_file: .env
    labels:
      traefik.enable: true
      traefik.http.routers.lidarr.tls: true
      traefik.http.routers.lidarr.tls.certresolver: letsencrypt
      traefik.http.routers.lidarr.rule: Host(`${SERVICE_URL_LIDARR}`)
      traefik.http.routers.lidarr.entrypoints: websecure
      traefik.http.routers.lidarr.middlewares: tinyauth
      traefik.http.routers.lidarr.priority: 99

      traefik.http.routers.lidarr-bypass.tls: true
      traefik.http.routers.lidarr-bypass.tls.certresolver: letsencrypt
      traefik.http.routers.lidarr-bypass.rule: Host(`${SERVICE_URL_LIDARR}`) && Header(`traefik-auth-bypass-key`, `${TRAEFIK_AUTH_BYPASS_KEY}`)
      traefik.http.routers.lidarr-bypass.entrypoints: websecure
      traefik.http.routers.lidarr-bypass.priority: 100

      tinyauth.apps.lidarr.config.domain: ${SERVICE_URL_LIDARR}
      tinyauth.apps.lidarr.oauth.groups: admin

      glance.name: Lidarr
      glance.icon: sh:lidarr
      glance.category: media
      glance.url: https://${SERVICE_URL_LIDARR}
      net.unraid.docker.webui: https://${SERVICE_URL_LIDARR}
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/lidarr.png
    restart: always

  sabnzbd:
    container_name: sabnzbd
    image: linuxserver/sabnzbd:4.5.3
    volumes:
      - ${APPDATA_PATH}/sabnzbd:/config
      - ${DATA_PATH}/usenet/:/data/usenet
    networks:
      - proxy
      - data_net
    env_file: .env
    labels:
      traefik.enable: true
      traefik.http.routers.sabnzbd.tls: true
      traefik.http.routers.sabnzbd.tls.certresolver: letsencrypt
      traefik.http.routers.sabnzbd.rule: Host(`${SERVICE_URL_SABNZBD}`)
      traefik.http.routers.sabnzbd.entrypoints: websecure
      traefik.http.routers.sabnzbd.middlewares: tinyauth
      traefik.http.routers.sabnzbd.priority: 99

      traefik.http.routers.sabnzbd-bypass.tls: true
      traefik.http.routers.sabnzbd-bypass.tls.certresolver: letsencrypt
      traefik.http.routers.sabnzbd-bypass.rule: Host(`${SERVICE_URL_SABNZBD}`) && Header(`traefik-auth-bypass-key`, `${TRAEFIK_AUTH_BYPASS_KEY}`)
      traefik.http.routers.sabnzbd-bypass.entrypoints: websecure
      traefik.http.routers.sabnzbd-bypass.priority: 100

      tinyauth.apps.sabnzbd.config.domain: ${SERVICE_URL_SABNZBD}
      tinyauth.apps.sabnzbd.oauth.groups: admin

      glance.name: Sabnzbd
      glance.icon: sh:sabnzbd
      glance.category: media
      glance.url: https://${SERVICE_URL_SABNZBD}
      net.unraid.docker.webui: https://${SERVICE_URL_SABNZBD}
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/sabnzbd.png
    restart: always

  deluge:
    container_name: deluge
    image: linuxserver/deluge:2.2.0
    volumes:
      - ${APPDATA_PATH}/deluge:/config
      - ${DATA_PATH}/torrents/:/data/torrents
    networks:
      - proxy
      - data_net
    env_file: .env
    labels:
      traefik.enable: true
      traefik.http.routers.deluge.tls: true
      traefik.http.routers.deluge.tls.certresolver: letsencrypt
      traefik.http.routers.deluge.rule: Host(`${SERVICE_URL_DELUGE}`)
      traefik.http.routers.deluge.entrypoints: websecure
      traefik.http.routers.deluge.middlewares: tinyauth
      traefik.http.routers.deluge.priority: 99

      traefik.http.routers.deluge-bypass.tls: true
      traefik.http.routers.deluge-bypass.tls.certresolver: letsencrypt
      traefik.http.routers.deluge-bypass.rule: Host(`${SERVICE_URL_DELUGE}`) && Header(`traefik-auth-bypass-key`, `${TRAEFIK_AUTH_BYPASS_KEY}`)
      traefik.http.routers.deluge-bypass.entrypoints: websecure
      traefik.http.routers.deluge-bypass.priority: 100

      tinyauth.apps.deluge.config.domain: ${SERVICE_URL_DELUGE}
      tinyauth.apps.deluge.oauth.groups: admin

      glance.name: Deluge
      glance.icon: sh:deluge
      glance.category: media
      glance.url: https://${SERVICE_URL_DELUGE}
      net.unraid.docker.webui: https://${SERVICE_URL_DELUGE}
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/deluge.png
    restart: always

  recyclarr:
    container_name: recyclarr
    image: ghcr.io/recyclarr/recyclarr:7.4.1
    volumes:
      - ${APPDATA_PATH}/recyclarr:/config
    networks:
      - data_net
    env_file: .env
    labels:
      glance.name: Recyclarr
      glance.icon: sh:recyclarr
      glance.category: media
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/recyclarr.png
    restart: always
    user: "${PUID}:${PGID}"

networks:
  proxy:
    external: true
  data_net:


services:
  postgresql:
    env_file:
    - .env
    environment:
      POSTGRES_DB: ${PG_DB:-authentik}
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
      - CMD-SHELL
      - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      timeout: 5s
    image: docker.io/library/postgres:16.10-alpine
    restart: unless-stopped
    networks:
      - default
    volumes:
    - ${APPDATA_PATH}/authentik/db:/var/lib/postgresql/data
  redis:
    command: --save 60 1 --loglevel warning
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 20s
      test:
      - CMD-SHELL
      - redis-cli ping | grep PONG
      timeout: 3s
    image: docker.io/library/redis:8.2.1-alpine
    restart: unless-stopped
    networks:
      - default
    volumes:
    - redis:/data
  authentik_server:
    command: server
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
    - .env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    image: ghcr.io/goauthentik/server:2025.8.4
    networks:
      - proxy
      - default
    restart: unless-stopped
    volumes:
    - ${APPDATA_PATH}/authentik/media:/media
    - ${APPDATA_PATH}/authentik/templates:/templates
    labels:
      traefik.enable: true
      traefik.http.routers.authentik.tls: true
      traefik.http.routers.authentik.tls.certresolver: letsencrypt
      traefik.http.routers.authentik.rule: Host(`${SERVICE_URL}`)
      traefik.http.routers.authentik.entrypoints: websecure
      traefik.http.routers.authentik.service: authentik
      traefik.http.services.authentik.loadbalancer.server.port: 9000
      traefik.http.middlewares.authentik.forwardauth.address: http://authentik_server:9000/outpost.goauthentik.io/auth/traefik
      traefik.http.middlewares.authentik.forwardauth.trustForwardHeader: true
      traefik.http.middlewares.authentik.forwardauth.authResponseHeaders: Remote-User,Remote-Email,Remote-Name,Remote-Groups,X-authentik-username,X-authentik-groups,X-authentik-entitlements,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
    

      glance.id: authentik
      glance.name: Authentik
      glance.icon: sh:authentik
      glance.url: https://${SERVICE_URL}
      net.unraid.docker.icon: https://cdn.jsdelivr.net/gh/selfhst/icons/png/authentik.png
      net.unraid.docker.webui: https://${SERVICE_URL}
  worker:
    command: worker
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
    - .env
    environment:
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
    image: ghcr.io/goauthentik/server:2025.8.4
    restart: unless-stopped
    user: root
    networks:
      - default
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ${APPDATA_PATH}/authentik/certs:/certs
    - ${APPDATA_PATH}/authentik/media:/media
    - ${APPDATA_PATH}/authentik/templates:/templates

volumes:
  redis:
    driver: local
networks:
  default:
  proxy:
    external: true
